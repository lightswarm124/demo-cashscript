import { Script } from '@cashscript/utils';
import { ContractNode, ParameterNode, VariableDefinitionNode, FunctionDefinitionNode, AssignNode, IdentifierNode, BranchNode, CastNode, FunctionCallNode, UnaryOpNode, BinaryOpNode, BoolLiteralNode, IntLiteralNode, HexLiteralNode, StringLiteralNode, TimeOpNode, ArrayNode, TupleIndexOpNode, RequireNode, SourceFileNode, Node, InstantiationNode, TupleAssignmentNode, NullaryOpNode } from '../ast/AST.js';
import AstTraversal from '../ast/AstTraversal.js';
export default class GenerateTargetTraversal extends AstTraversal {
    output: Script;
    stack: string[];
    private scopeDepth;
    private currentFunction;
    private emit;
    private pushToStack;
    private popFromStack;
    private removeFromStack;
    private nipFromStack;
    private getStackIndex;
    visitSourceFile(node: SourceFileNode): Node;
    visitContract(node: ContractNode): Node;
    visitFunctionDefinition(node: FunctionDefinitionNode): Node;
    removeFinalVerify(): void;
    cleanStack(): void;
    visitParameter(node: ParameterNode): Node;
    visitVariableDefinition(node: VariableDefinitionNode): Node;
    visitTupleAssignment(node: TupleAssignmentNode): Node;
    visitAssign(node: AssignNode): Node;
    emitReplace(index: number): void;
    visitTimeOp(node: TimeOpNode): Node;
    visitRequire(node: RequireNode): Node;
    visitBranch(node: BranchNode): Node;
    removeScopedVariables(depthBeforeScope: number): void;
    visitCast(node: CastNode): Node;
    visitFunctionCall(node: FunctionCallNode): Node;
    visitMultiSig(node: FunctionCallNode): Node;
    visitInstantiation(node: InstantiationNode): Node;
    visitTupleIndexOp(node: TupleIndexOpNode): Node;
    visitBinaryOp(node: BinaryOpNode): Node;
    visitUnaryOp(node: UnaryOpNode): Node;
    visitNullaryOp(node: NullaryOpNode): Node;
    visitArray(node: ArrayNode): Node;
    visitIdentifier(node: IdentifierNode): Node;
    isOpRoll(node: IdentifierNode): boolean;
    visitBoolLiteral(node: BoolLiteralNode): Node;
    visitIntLiteral(node: IntLiteralNode): Node;
    visitStringLiteral(node: StringLiteralNode): Node;
    visitHexLiteral(node: HexLiteralNode): Node;
}
