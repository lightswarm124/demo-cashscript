import { PrimitiveType, BytesType } from '@cashscript/utils';
export class Node {
}
export class SourceFileNode extends Node {
    constructor(contract) {
        super();
        this.contract = contract;
    }
    accept(visitor) {
        return visitor.visitSourceFile(this);
    }
}
export class ContractNode extends Node {
    constructor(name, parameters, functions) {
        super();
        this.name = name;
        this.parameters = parameters;
        this.functions = functions;
    }
    accept(visitor) {
        return visitor.visitContract(this);
    }
}
export class FunctionDefinitionNode extends Node {
    constructor(name, parameters, body) {
        super();
        this.name = name;
        this.parameters = parameters;
        this.body = body;
        this.opRolls = new Map();
    }
    accept(visitor) {
        return visitor.visitFunctionDefinition(this);
    }
}
export class ParameterNode extends Node {
    constructor(type, name) {
        super();
        this.type = type;
        this.name = name;
    }
    accept(visitor) {
        return visitor.visitParameter(this);
    }
}
export class StatementNode extends Node {
}
export class VariableDefinitionNode extends StatementNode {
    constructor(type, modifier, name, expression) {
        super();
        this.type = type;
        this.modifier = modifier;
        this.name = name;
        this.expression = expression;
    }
    accept(visitor) {
        return visitor.visitVariableDefinition(this);
    }
}
export class TupleAssignmentNode extends StatementNode {
    constructor(var1, var2, tuple) {
        super();
        this.var1 = var1;
        this.var2 = var2;
        this.tuple = tuple;
    }
    accept(visitor) {
        return visitor.visitTupleAssignment(this);
    }
}
export class AssignNode extends StatementNode {
    constructor(identifier, expression) {
        super();
        this.identifier = identifier;
        this.expression = expression;
    }
    accept(visitor) {
        return visitor.visitAssign(this);
    }
}
export class TimeOpNode extends StatementNode {
    constructor(timeOp, expression) {
        super();
        this.timeOp = timeOp;
        this.expression = expression;
    }
    accept(visitor) {
        return visitor.visitTimeOp(this);
    }
}
export class RequireNode extends StatementNode {
    constructor(expression) {
        super();
        this.expression = expression;
    }
    accept(visitor) {
        return visitor.visitRequire(this);
    }
}
export class BranchNode extends StatementNode {
    constructor(condition, ifBlock, elseBlock) {
        super();
        this.condition = condition;
        this.ifBlock = ifBlock;
        this.elseBlock = elseBlock;
    }
    accept(visitor) {
        return visitor.visitBranch(this);
    }
}
export class BlockNode extends Node {
    constructor(statements) {
        super();
        this.statements = statements;
    }
    accept(visitor) {
        return visitor.visitBlock(this);
    }
}
export class ExpressionNode extends Node {
}
export class CastNode extends ExpressionNode {
    constructor(type, expression, size) {
        super();
        this.type = type;
        this.expression = expression;
        this.size = size;
    }
    accept(visitor) {
        return visitor.visitCast(this);
    }
}
export class FunctionCallNode extends ExpressionNode {
    constructor(identifier, parameters) {
        super();
        this.identifier = identifier;
        this.parameters = parameters;
    }
    accept(visitor) {
        return visitor.visitFunctionCall(this);
    }
}
export class InstantiationNode extends ExpressionNode {
    constructor(identifier, parameters) {
        super();
        this.identifier = identifier;
        this.parameters = parameters;
    }
    accept(visitor) {
        return visitor.visitInstantiation(this);
    }
}
export class TupleIndexOpNode extends ExpressionNode {
    constructor(tuple, index) {
        super();
        this.tuple = tuple;
        this.index = index;
    }
    accept(visitor) {
        return visitor.visitTupleIndexOp(this);
    }
}
export class BinaryOpNode extends ExpressionNode {
    constructor(left, operator, right) {
        super();
        this.left = left;
        this.operator = operator;
        this.right = right;
    }
    accept(visitor) {
        return visitor.visitBinaryOp(this);
    }
}
export class UnaryOpNode extends ExpressionNode {
    constructor(operator, expression) {
        super();
        this.operator = operator;
        this.expression = expression;
    }
    accept(visitor) {
        return visitor.visitUnaryOp(this);
    }
}
export class NullaryOpNode extends ExpressionNode {
    constructor(operator) {
        super();
        this.operator = operator;
    }
    accept(visitor) {
        return visitor.visitNullaryOp(this);
    }
}
export class ArrayNode extends ExpressionNode {
    constructor(elements) {
        super();
        this.elements = elements;
    }
    accept(visitor) {
        return visitor.visitArray(this);
    }
}
export class IdentifierNode extends ExpressionNode {
    constructor(name) {
        super();
        this.name = name;
    }
    accept(visitor) {
        return visitor.visitIdentifier(this);
    }
}
export class LiteralNode extends ExpressionNode {
}
export class BoolLiteralNode extends LiteralNode {
    constructor(value) {
        super();
        this.value = value;
        this.type = PrimitiveType.BOOL;
    }
    accept(visitor) {
        return visitor.visitBoolLiteral(this);
    }
}
export class IntLiteralNode extends LiteralNode {
    constructor(value) {
        super();
        this.value = value;
        this.type = PrimitiveType.INT;
    }
    accept(visitor) {
        return visitor.visitIntLiteral(this);
    }
}
export class StringLiteralNode extends LiteralNode {
    constructor(value, quote) {
        super();
        this.value = value;
        this.quote = quote;
        this.type = PrimitiveType.STRING;
    }
    accept(visitor) {
        return visitor.visitStringLiteral(this);
    }
}
export class HexLiteralNode extends LiteralNode {
    constructor(value) {
        super();
        this.value = value;
        this.type = new BytesType(value.byteLength);
    }
    accept(visitor) {
        return visitor.visitHexLiteral(this);
    }
}
//# sourceMappingURL=AST.js.map