import AstVisitor from './AstVisitor.js';
export default class AstTraversal extends AstVisitor {
    visitSourceFile(node) {
        node.contract = this.visit(node.contract);
        return node;
    }
    visitContract(node) {
        node.parameters = this.visitList(node.parameters);
        node.functions = this.visitList(node.functions);
        return node;
    }
    visitFunctionDefinition(node) {
        node.parameters = this.visitList(node.parameters);
        node.body = this.visit(node.body);
        return node;
    }
    visitParameter(node) {
        return node;
    }
    visitVariableDefinition(node) {
        node.expression = this.visit(node.expression);
        return node;
    }
    visitTupleAssignment(node) {
        node.tuple = this.visit(node.tuple);
        return node;
    }
    visitAssign(node) {
        node.identifier = this.visit(node.identifier);
        node.expression = this.visit(node.expression);
        return node;
    }
    visitTimeOp(node) {
        node.expression = this.visit(node.expression);
        return node;
    }
    visitRequire(node) {
        node.expression = this.visit(node.expression);
        return node;
    }
    visitBranch(node) {
        node.condition = this.visit(node.condition);
        node.ifBlock = this.visit(node.ifBlock);
        node.elseBlock = this.visitOptional(node.elseBlock);
        return node;
    }
    visitBlock(node) {
        node.statements = this.visitOptionalList(node.statements);
        return node;
    }
    visitCast(node) {
        node.expression = this.visit(node.expression);
        node.size = this.visitOptional(node.size);
        return node;
    }
    visitFunctionCall(node) {
        node.identifier = this.visit(node.identifier);
        node.parameters = this.visitList(node.parameters);
        return node;
    }
    visitInstantiation(node) {
        node.identifier = this.visit(node.identifier);
        node.parameters = this.visitList(node.parameters);
        return node;
    }
    visitTupleIndexOp(node) {
        node.tuple = this.visit(node.tuple);
        return node;
    }
    visitBinaryOp(node) {
        node.left = this.visit(node.left);
        node.right = this.visit(node.right);
        return node;
    }
    visitUnaryOp(node) {
        node.expression = this.visit(node.expression);
        return node;
    }
    visitNullaryOp(node) {
        return node;
    }
    visitArray(node) {
        node.elements = this.visitList(node.elements);
        return node;
    }
    visitIdentifier(node) {
        return node;
    }
    visitBoolLiteral(node) {
        return node;
    }
    visitIntLiteral(node) {
        return node;
    }
    visitStringLiteral(node) {
        return node;
    }
    visitHexLiteral(node) {
        return node;
    }
}
//# sourceMappingURL=AstTraversal.js.map